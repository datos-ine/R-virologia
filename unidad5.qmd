---
title: "Unidad 5: Estadísticos, operaciones múltiples y resúmenes"
editor: 
  markdown: 
    wrap: 72
---

```{r}
#| echo: false
# opciones globales
knitr::opts_chunk$set(
  echo = T,
  message = F,
  warning = F,
  fig.align = "center"
)

# paquetes
pacman::p_load(
  tidyverse,
  readxl
)
```

## Introducción

Con las herramientas conocidas hasta el momento sabemos obtener resúmenes estadísticos de variables cuantitativas usando a `summarise()` y estratificados a partir de `group_by()` o el argumento `by =` de  `summarise()`.

Dentro de este andamiaje que produce `summarise()` se aplican las funciones estadísticas conocidas de lenguaje como:

-   `min()` mínimo
-   `max()` máximo
-   `mean()` media
-   `median()` mediana
-   `var()` varianza
-   `sd()` desvío
-   `sum()` sumatoria
-   `first()` primer valor en el vector
-   `last()` último valor en el vector
-   `n()` número de valores en el vector
-   `n_distinct()` números de valores distintos en el vector

Y tantas otras provenientes de paquetes específicos como construidas (propias).

Estas tareas, ya sea transformando u obteniendo resultados resumenes de variables, las aplicamos variable a variable, es decir repitiendo las operaciones para cada una de las columnas de una tabla.

Una premisa del tidyverse, y también de la programación en general, es no copiar y pegar el código mas de dos veces. Si bien esta práctica ahorra tiempo y no esta mal en si mismo, hacerlo suele ser una fuente de errores y además incrementa las líneas de código del script.

## Operaciones múltiples

![](images/05/across.PNG){fig-align="center" width="300"}

El paquete **dplyr** de *tidyverse* implementa desde hace poco tiempo un esquema de trabajo para operaciones múltiples o simultáneas a través de su función `across()`.

Esta función se puede utilizar en estructuras de `mutate()` o `summarise()` dependiendo del resultado buscado y tiene dos partes fundamentales: la captura o selección de variables donde vamos a aplicar determinadas funciones y la declaración de las funciones a aplicar.

### `across()`

La función se incorporó a partir de la versión de dplyr 1.0.0 y su sintaxis general es:

```{r}
#| eval: false
#| echo: true

across(.cols,  
       .fns,  
       ...,  
       .names)
```

donde los argumentos son:

`.cols` = columnas a transformar

`.fns` = función o funciones para aplicar a cada columna de .cols

`...` = argumentos adicionales de las funciones especificadas anteriormente (ejemplo: na.rm = T)

`.names` = nombres de las columnas de salida. Aquí, {.col} es un marcador especial al que se le puede agregar el sufijo deseado.

### Aplicación en resúmenes

Veamos un ejemplo de uso para situaciones donde queremos obtener resumenes simultáneos.

Tomemos la siguiente tabla de datos ficticios:

```{r}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)

set.seed(123)

datos <- tibble(
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)
```

```{r}
#| echo: true

datos
```

Supongamos que queremos calcular la media de cada variable numérica, con lo que sabemos hasta ahora podríamos hacerlo repitiendo para cada variable.

```{r}
#| echo: true

datos |> summarise(
  a = mean(a),
  b = mean(b),
  c = mean(c),
  d = mean(d),
)
```

Pero esto rompe la regla general que buscamos de nunca copiar y pegar más de dos veces, ocasionando que me pueda equivocar al editar el nombre de la variable que va en cada `mean()` y generando tantas líneas de código como cantidad de variables tengo.

Para solucionarlo vamos a aplicar `across()` realizando el resumen simultáneo en una sola línea.

```{r}
#| echo: true

datos |> summarise(
  across(.cols = a:d, 
         .fns = mean),
)

```

Observemos que el primer argumento es el rango de nombres de variables que estamos seleccionando donde aplicar la función que aperece como segundo argumento.

Es decir, que el primer argumento de la función responde de la misma forma que la función `select()` y por ende, aplican también las *funciones ayudantes de selección*.

::: columns
::: {.column width="50%"}
-   `everything()`: coincide con todas las variables.

-   `group_cols()`: seleccione todas las columnas de agrupación.

-   `starts_with()`: comienza con un prefijo.

-   `ends_with()`: termina con un sufijo.

-   `contains()`: contiene una cadena literal.

-   `matches()`: coincide con una expresión regular.
:::

::: {.column width="50%"}
-   `num_range()`: coincide con un rango numérico como x01, x02, x03.

-   `all_of()`: coincide con nombres de variables en un vector de caracteres. Todos los nombres deben estar presentes; de lo contrario, se generará un error de fuera de límites.

-   `any_of()`: igual que `all_of()`, excepto que no se genera ningún error para los nombres que no existen.

-   `where()`: aplica una función a todas las variables y selecciona aquellas para las cuales la función regresa TRUE.
:::
:::

Mostremos otra tabla de ejemplo similar a la anterior:

```{r}
#| echo: false

datos <- tibble(
  grupo = sample(c("A", "B"), 10, replace = TRUE),
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)
```

```{r}
#| echo: true

datos
```

Aquí **datos** agrega una variable categórica llamada `grupo` con dos valores (A y B).

Usando `group_by()` combinada con una selección completa (ayudante everything) del resto de las variables obtenemos las medias por cada uno de estos grupos.

```{r}
#| echo: true

datos |> 
  group_by(grupo) |> 
  summarise(across(everything(), mean))
```

El argumento `.cols` también puede recibir construcciones *booleanas* utilizando los operadores conocidos como `!` (negación) y conectores lógicos como `&` (AND) y `|` (OR) entre las funciones ayudantes de selección.

```{r}
#| echo: true
#| eval: false

.cols = !where(is.numeric) & starts_with("a")
```

En este ejemplo, se seleccionan todas las columnas no numéricas, cuyo nombre comienza con "a".

Hasta ahora vimos el ejemplo de aplicar una función simple como `mean()` a un grupo de variables.

Que sucede si entre los datos de esas variables hay valores **NA**?

```{r}
#| echo: false

set.seed(123)

rnorm_na <- function(n, n_na, mean = 0, sd = 1) {
  sample(c(rnorm(n - n_na, mean = mean, sd = sd), rep(NA, n_na)))
}

datos_na <- tibble(
  a = rnorm_na(5, 1),
  b = rnorm_na(5, 1),
  c = rnorm_na(5, 2),
  d = rnorm(5)
)
```

```{r}
#| echo: true

datos_na
```

Vamos a necesitar incorporar el argumento `na.rm = TRUE` a la función `mean()` porque si no el resultado será:

```{r}
#| echo: true

datos_na |> summarise(
  across(.cols = a:d, 
         .fns = mean),
)

```

Como lo hacemos dentro de un `across()`? 

Existen dos formas sintácticas de realizarlo.

-   Una función estilo-purrr (tidyverse) que tiene la forma `~ mean(.x, na.rm = TRUE)`

-   Una función anónima de R base mediante `function(x) mean(x, na.rm = TRUE)` o más sencilla en su forma de atajo: `\(x) mean(x, na.rm = TRUE)`

```{r}
#| echo: true

# forma tidyverse (purrr)

datos_na |> 
  summarise(
    across(a:d, ~ mean(.x, na.rm = TRUE))
  )
```

```{r}
#| echo: true

# forma R base (atajo función anómina)

datos_na |> 
  summarise(
    across(a:d, \(x) mean(x, na.rm = TRUE))
  )
```

Se le llama función anónima justamente porque no hace falta ponerle nombre. Acostumbrarse a esta notación es más útil que la forma del tidyverse porque aplica también para otras funciones. 

Para incorporar más de una función dentro de `across()` debemos incluirlas dentro de una lista \[`list()`\]

```{r}
#| echo: true

datos_na |> 
  summarise(
    across(a:d, list(
      media = \(x) mean(x, na.rm = TRUE),
      desvio = \(x) sd(x, na.rm = TRUE),
      n_na = \(x) sum(is.na(x))))
  )
```

La lista contiene cada función a aplicar, bajo nombres definidos a la izquierda del igual. El resultado muestra 12 variables producto de hacer tres operaciones en cada una de las 4 variables de la tabla.

Observemos que los nombres de las variables resultado se componen del nombre de la columna, un guión bajo y el nombre definido de la función aplicada (`variable_funcion`)

La estructura de estos nombres se pueden modificar con el argumento `.names`.

El marcador especial para el nombre de columna es `{.col}` y para el nombre de la función definida es `{.fn}`.

Por ejemplo, podríamos invertir el orden predeterminado de los nombres del resumen (`funcion_variable`)

```{r}
#| echo: true

datos_na |> 
  summarise(
    across(a:d, list(
      media = \(x) mean(x, na.rm = TRUE),
      n_na = \(x) sum(is.na(x))),
      .names = "{.fn}_{.col}")
  )
```

### Aplicación en conversión o creación de nuevas variables

Hasta el momento trabajamos con la función `across()` dentro de un resumen (`summarise`) pero al comienzo también dijimos que se puede utilizar para transformaciones masivas de datos.

La plataforma para lograr esto es `mutate()` y lo podemos usar  modificando las variables originales o bien creando nuevas variables si cambiamos su nombre con `.names`.

Para ejemplificar, aplicaremos la función `coalesce()` perteneciente a dplyr, para convertir los valores **NA** en ceros, transformando las variables originales anteriores.

```{r}
#| echo: true

datos_na |> 
  mutate(
    across(a:d, \(x) coalesce(x, 0))
  )
```
Si no agregamos ningún otro argumento el reemplazo de los valores **NA** por 0 se realiza en cada variable sobrescribiendo las observaciones.

En cambio, si queremos que coexistan las variables originales con las nuevas incluyendo estos cambios podemos declarar en el argumento `.names` la estructura de los nombres nuevos. 

```{r}
#| echo: true

datos_na |> 
  mutate(
    across(a:d, \(x) coalesce(x, 0),
      .names = "{.col}_na_cero")
  )
```
Otras conversiones posibles pueden utilizar funciones de reemplazo para variables cuantitativas como por ejemplo `exp()`, `log()`, `scale()`, etc. O bien convertir a factor variables character y hasta  aplicar funciones condicionales como `if_else()` o `case_when()`.  

## Filtros con iteraciones

El paquete **dplyr** trae consigo algunas funciones iterativas emparentadas con `across()` para usar dentro de estructuras de filtro -`filter()`-, es el caso de `if_any()` e `if_all()`.

`if_any()` enmascara una repetición de **OR** lógicos `if_all()` una secuencia de **AND** lógicos.

Usémoslas con los datos con los que venimos trabajando.

```{r}
#| echo: true

datos_na |> 
  filter(if_any(a:d, is.na))
```

Devuelve las observaciones donde en alguna de las variables encuentra algún NA.

Es lo mismo que `filter(is.na(a) | is.na(b) | is.na(c) | is.na(d))`



```{r}
#| echo: true

datos_na |> 
  filter(if_all(a:d, is.na))
```

Devuelve las observaciones donde en todas las variables encuentra valores NA. En este caso no hay ninguna que cumpla esa condición, por eso el resultado es un dataframe vacío.

Es lo mismo que `filter(is.na(a) & is.na(b) & is.na(c) & is.na(d))`

Una forma rápida de armar filtros por múltiples variables escribiendo poco código.

Las dos funciones de filtro trabajan con el mismo esquema que `across()`, por lo tanto se le puede aplicar una función o expresión de condición (todas deben devolver `TRUE` o `FALSE`)


```{r}
#| echo: true

datos |> 
  filter(if_all(a:d, \(x) x > -0.5 & x < 1))
```

Acá el valor de cada en todas las observaciones filtradas debe estar en el rango -0,5 a 1. Hay una que cumple la condición en las 4 variables numéricas.

## Operaciones por fila

La filosofía del tidy-data, es particularmente adecuada para realizar operaciones por columnas (variables). Todas las funciones de resúmenes toman los valores de forma vertical para realizar una operación, como si tuviesemos vectores "parados" dentro de un dataframe.

Hay algunas circunstancias que nos lleva a necesitar realizar operaciones por filas y por supuesto esto es mucho más difícil. 

El paquete **dplyr** incorporó en sus últimas versiones la función  `rowwise()` que implementa un agrupamiento por cada fila, haciendo que sea más sencillo hacer estas tareas.

El uso más común es hacer calculos agregados por filas (por ejemplo, calcular la media de x, y, z).

La apariencia de los resultados de la función son similares a `group_by()` donde solo vemos cambios en los metadatos del dataframe que luego van a ser aprovechados por las funciones siguientes.

Tenemos un pequeño dataframe de prueba:

```{r}
#| echo: false


df <- tibble(x = 1:2, y = 3:4, z = 5:6)

df
```

Y aplicamos la función `rowwise()`

```{r}
#| echo: true

df |> 
  rowwise()
```
Lo único que vemos es la aparición de un metadatos que dice "rowwise". Significa que las filas de la tabla está agrupadas a lo ancho y las funciones que vengan despues van a respetar este agrupamiento.

Para ver los cambios que produce este agrupamiento veamos un ejemplo comparativo.

```{r}
df |>  
  mutate(m = mean(c(x, y, z)))

df |> 
  rowwise() |> 
  mutate(m = mean(c(x, y, z)))
```

Si usamos `mutate()` con un dataframe normal, calcula la media de x, y, z tomando los valores de todas las filas. Si lo aplicamos a una tabla con **rowwise**, calcula la media de cada fila, tomando los valores de cada una de las tres variables.

Opcionalmente, se puede indicar variables como "identificador". 

Estas variables se conservan cuando se llama a un `summarise()` por ejemplo, por lo que se comportan de manera similar a las variables de agrupación pasadas a `group_by()`.

Cambiamos el dataframe que ahora es:


```{r}
#| echo: false


df <- tibble(nombre = c("Mercurio", "Venus"), x = 1:2, y = 3:4, z = 5:6)

df
```

```{r}


df |> 
  rowwise() |>   
  summarise(m = mean(c(x, y, z)))


df  |>  
  rowwise(nombre) |>  
  summarise(m = mean(c(x, y, z)))

```

`rowwise()` es solo una forma especial de agrupación por fila, por lo que si deseamos eliminarla de una tabla, simplemente llamamos a `ungroup()`.

### `c_across()`

La versión de `across()` para operaciones simultáneas por filas se llama `c_across()` y tiene los mismos fundamentos aplicados a estas situaciones, aunque es mucho más sencilla dado que no tiene argumentos extras.

Aplicada sobre el último dataframe:

```{r}
df  |>  
  rowwise(nombre) |>  
  summarise(m = mean(c_across(x:z)))
```

O bien, seleccionando los tipos de datos numéricos:

```{r}
df  |>  
  rowwise(nombre) |>  
  summarise(m = mean(c_across(where(is.numeric))))
```

Sin duda este abordaje tiene mayor utilidad cuando las operaciones por fila contemplan muchas variables.


## Estadísticos compatibles con tidyverse

El interprete de R trae muchas funciones estadísticas descriptivas y para inferencia disponibles en su versión base pero ninguna de estas son compatibles con la filosofia de trabajo de tidyverse. Es por eso que para utilizar funciones como `mean()` o `median()` por ejemplo, debemos introducirlas dentro de estructuras como `summarise()`. Las funciones de este tipo trabajan sobre vectores y no tienen en cuenta a los dataframes que encapsulan a los vectores como variables.

```{r}
#| echo: false
datos <- tibble::tibble(Edad = c(34, 56, 43, 21, 67, 89, 54, 32, 16, 76))
```

Tenemos estos datos y vamos a calcular su media.

```{r}
datos
```
Si lo abordamos con la sintaxis R base:


```{r}
# Edad es una variable de datos pero llamada así es un vector numérico

datos$Edad

# preguntamos si es vector

is.vector(datos$Edad)


# ejecutamos mean() sobre ese vector
mean(datos$Edad)
```

Si lo abordamos con tuberías.

```{r}
#| message: false
#| warning: false
#| error: true

library(tidyverse)
```

```{r}
#| message: false
#| warning: true
#| error: true
datos |> 
  mean(Edad)
```

Necesitamos la función `summarise()` para que funcione bien.

```{r}
datos |> 
  summarise(media_edad = mean(Edad))
```

Cuando los estadísticos son más complejos que estas funciones descriptivas y devuelven un conjunto de resultados en forma de lista ni siquiera alcanza con aplicarlas dentro de un andamiaje de tidyverse como `summarise()`.

Un ejemplo de ello, son todas las funciones de R base para comparaciones de inferencia. Tomemos el caso de la prueba **t de Student**, que sirve para comparar las medias de muestras aproximadamente normales.

La función de R base es `t.test()` y sus argumentos obligatorios son `x` e `y` o bien utilizar un formato fórmula (`var1` ~ `var2`) 

Para comparar dos conjuntos de datos con la forma x e y los datos tienen que estar en dos variables separadas y por lo tanto no cumplir con el formato "ordenado".

```{r}
#| echo: false
datos <- tibble::tibble(Edad1 = c(34, 56, 43, 21, 67, 89, 54, 32, 16, 76),
                        Edad2 = c(45, 76, 32, 12, 14, 18, 20, 54, 98, 32))
```

```{r}
datos
```

Aplicamos la función teniendo en cuenta que lo que ingresa en cada argumento es un vector (dataframe$variable)

```{r}
t.test(x = datos$Edad1, y = datos$Edad2)
```
El resultado da un valor de probabilidad de 0,47 lo que indica que no hay diferencias significativas entre las medias de las dos muestras.

Para usar el formato fórmula es necesario que la tabla de datos cumpla con el formato "ordenado", quedando:

```{r}
#| echo: false
datos <- tibble::tibble(Muestra = c(rep(1, 10), rep(2, 10)),
                        Edad = c(34, 56, 43, 21, 67, 89, 54, 32, 16, 76, 45, 76, 32, 12, 14, 18, 20, 54, 98, 32))
```

```{r}
datos
```
En este caso el `t.test()` lleva formula y datos en el argumento data.

```{r}
t.test(formula = Edad ~ Muestra, data = datos)
```

Lo importante acá no es el resultado sino la forma en que lo devuelve. Observaran que no se trata de un formato ordenado ni se parece a una tabla. El tidyverse siempre (salvo raras excepciones, como con `pull()`) devuelve una tabla de datos ordenada y por eso todas estas funciones son incompatibles, aún utilizando un `summarise()` y nos dan error:

```{r}
#| error: true
datos |> 
  summarise(IC = t.test(Edad ~ Muestra))
```
Hace unos años a un desarrollador se le ocurrió crear un paquete que contiene todas estas funciones (y algunas más) del R base ***en espejo*** pero compatibles con tidyverse, esto es: reciben un dataframe y devuelven un dataframe.

El paquete se llama **rstatix** y provee un marco simple e intuitivo compatible con el uso de tuberías, coherente con la filosofía de diseño "tidyverse", para realizar pruebas estadísticas descriptivas básicas y otras más avanzadas de inferencia y modelado.

Las funciones de inferencia estadística, para comparar medias y proporciones (métodos paramétricos y no paramétricos), ANOVAS, analisis post-hoc, correlaciones y tamaños de efecto, así como también valores p ajustados o agregados de etiquetas de significación no serán explicados en este curso pero aquellxs que les interese profundizar y utilizarlas le pueden sacar un provecho muy útil a este paquete, cuyo sitio es <https://rpkgs.datanovia.com/rstatix/index.html>.

Respecto del ejemplo anterior la función de **rstatix** que reemplaza al `t.test()` tradicional es `t_test()`, es decir que al modo tidyverse reemplaza en el nombre el punto por un guión bajo (sucede en todas las funciones del paquete). 

```{r}
#| message: false
#| warning: false
library(rstatix)

datos |> 
  t_test(Edad ~ Muestra, conf.level = .95)
```
Ahora si, el resultado es una tabla de 8 variables por una fila, lo que nos va a permitir poder continuar el trabajo con tuberías. Debajo seleccionamos solo la variable que queremos ver (valor de p).

```{r}
datos |> 
  t_test(Edad ~ Muestra, conf.level = .95) |> 
  select(p)
```

Dentro de los estadísticos descriptivos la función `get_summary_stats()` devuelve un resumen univariado para variables cuantitativas.

```{r}
datos |> 
  get_summary_stats(Edad)
```
Y al ser compatible con tidyverse se puede estratificar con `group_by()`.

```{r}
datos |> 
  group_by(Muestra) |> 
  get_summary_stats(Edad)
```

La función `freq_table()` construye tablas con las variables categóricas.

```{r}
#| echo: false
datos <- tibble::tibble(Sexo = c(rep("Varon", 6), rep("Mujer", 14)),
                        Fuma = c("Si", "No", "No", "Si", "Si", "Si", "No", "No", "Si", "Si", "No", "No", "No", "No", "No", "No", "Si", "No", "Si", "No"))
```

```{r}
datos |> 
 freq_table(Sexo)
```
También agregando otra variables que estratifiquen la salida.

```{r}
datos |> 
 freq_table(Sexo, Fuma)
```

Una opción más completa para construir tablas y tablas de contingencia es usar la familia de funciones `tabyl()` del paquete **janitor**.

```{r}
#| message: false
#| warning: false
library(janitor)

datos |> 
  tabyl(Sexo)
```



Calcula las frecuencias absolutas y relativas de variables categóricas de forma similar a `freq_table()` pero se le pueden modificar sus argumentos y asociar otras funciones del paquete mediante tuberías para obtener mejores resultados (también es compatible con tidyverse).

```{r}
datos |>  
  tabyl(Sexo) |> 
  adorn_totals(where = "row") %>% # agregamos totales 
  adorn_pct_formatting(digits = 2) # porcentaje con dos decimales
```

La forma más adecuada de describir la relación entre dos variables categóricas es a partir de la construcción de una tabla de contingencia. Para ello se introduce en cada fila de la tabla las categorías de una de las variables y las categorías de la otra variable se asocian a cada una de las columnas de la tabla, en cada celda de la tabla aparecerá el número de observaciones correspondientes a la combinación oportuna de ambas variables. Si bien `freq_table()` hace lo mismo, respeta la salida ordenada lo que dificulta su lectura.

Con la misma función `tabyl()` se puede realizar una tabla de contingencia, incluyendo a la variable Fuma. 

```{r}
datos  |>   
  tabyl(Sexo, Fuma) 
```

Recordemos que el orden dentro de los paréntesis de la función es igual al de los índices del lenguage, el primer argumento es la variable que aparecerá en las filas y el segundo la variable de las columnas. Por ese motivo, en la tabla de contingencia absoluta tenemos el Sexo en las filas y a Fuma en las columnas.

Su salida se puede mejorar con totales por columna y que aparezca el nombre de la variable que esta en la columna:

```{r}
datos  |>   
  tabyl(Sexo, Fuma) |> 
  adorn_title(placement = "combined") |> 
  adorn_totals(where = "row")
```

También haciendo que los valores sean porcentuales por fila.

```{r}
datos  |>   
  tabyl(Sexo, Fuma) |>  
  adorn_title(placement = "combined") |> 
  adorn_totals(where = "row") |>  
  adorn_percentages(denominator = "row") |>  #  % por fila
  adorn_pct_formatting(digits = 2) # redondea con 2 decimales
```

Incoporamos valores absolutos entre paréntesis.

```{r}
datos  |>   
  tabyl(Sexo, Fuma) |>  
  adorn_totals(where = "row") |>  
  adorn_percentages(denominator = "row") |>  
  adorn_pct_formatting(digits = 2) |> 
  adorn_ns() |> 
  adorn_title() 
```

El paquete trae muchas funciones que se integran para construir tablas complejas. Más de estas opciones las pueden encontrar en el sitio oficial del paquete [janitor](https://sfirke.github.io/janitor/)

## Tablas para presentaciones

Cuando necesitemos presentar resultados estadísticos combinados, producto de variables cuanti y cualitativas a la vez, podemos hechar mano a funciones del paquete **gtsummary**.

![](images/05/gtsummary.PNG){fig-align="center" width="100"}

Esta librería proporciona una forma elegante y flexible de crear tablas analíticas y de resumen, univariadas, estratificadas y complejas.

Integra estimaciones estadísticas predefinidas y se pueden personalizar a gusto, interactuando con otros paquetes como **gt**, **labelled** y **flextable**.

En el sitio del desarrollador [(gtsummary)](https://www.danieldsjoberg.com/gtsummary/), encontrarán mucha documentación para adecuar los requerimientos de la salida buscada.

Mostramos un ejemplo en función de unos datos de prueba. 

```{r}
#| message: false
#| warning: false

library(readxl)
library(gtsummary)


datos <- read_excel("datos/base2023r.xlsx")


datos |> 
  select(EDAD_DIAGNOSTICO, SEXO, MOTIVO_CONSULTA) |>
  tbl_summary()
```
Quizás lo mejor sea presentar los datos estratificados por sexo, por ejmplo. Además configuramos algunos argumentos mas.

```{r}
datos |> 
  select(EDAD_DIAGNOSTICO, SEXO, MOTIVO_CONSULTA) |>
  filter(SEXO != "A") |> 
  tbl_summary(by = SEXO,
              statistic = list(
                all_continuous() ~ "{mean} ({sd})",
                all_categorical() ~ "{n} / {N} ({p}%)"),
              digits = all_continuous() ~ 1,
              missing_text = "Sin dato") |> 
  modify_header(label ~ "**Variable**")
```

El argumento `statistic` permite que, mediante una lista, configuremos los estadísticos a presentar. Para todas las variables continuas seleccionamos la media (mean) y el desvío estandar (sd); para todas las variables categóricas el conteo de cada categoría y el porcentaje. Los decimales de las variables continuas quedan definidos en 1 y cuando aparezcan valores NA serán expresados con la etiqueta "Sin dato". Por último, la cabecera de la tabla en la comuna de las variables será "Variable" en negrita.

### Flextable

![](images/05/flextable.png){fig-align="center" width="100"}

Estas tablas de presentación de resultados se pueden conectar con el paquete **flextable** para exportarlas en diferentes formatos, como *Word, html, PDF, PowerPoint* o *imagen* y además se vincula con el contenido en estructuras de archivos **rmarkdown** y/o **Quarto**.

Una salida interesante es poder guardar la tabla en formato **Word** (.docx), porque luego podemos editarla facilmente, para esto la función `as_flex_table()` convierte al `tbl_summary()` de **gtsummry** en clase flextable.

```{r}
#| message: false
#| warning: false

library(flextable)

tabla1 <- datos |> 
  select(EDAD_DIAGNOSTICO, SEXO, MOTIVO_CONSULTA) |>
  filter(SEXO != "A") |> 
  tbl_summary(by = SEXO,
              statistic = list(
                all_continuous() ~ "{mean} ({sd})",
                all_categorical() ~ "{n} / {N} ({p}%)"),
              digits = all_continuous() ~ 1,
              missing_text = "Sin dato") |> 
  modify_header(label ~ "**Variable**") |> 
  as_flex_table() |> 
  autofit() |>    # ajuste automático 
  theme_box()     # tema box

tabla1
```

Luego es posible exportar fácilmente una o más tablas a partir de los objetos flextables almacenados a documentos tipo html, RTF, Word, PowerPoint o PNG.

Un ejemplo para salidas tipo Word es: `save_as_docx()`

```{r}
#| eval: false
save_as_docx(
  "tabla 1" = tabla1, 
  path = "/resultados/tabla_exportada.docx")
```

Exporta el objeto *tabla1* en el archivo **tabla_exportada.docx** dentro de la carpeta *resultados*. 

Todos los objetos de clase *flextable* están compuestos por tres partes:

- **header**: de forma predeterminada, solo hay una fila de encabezado que contiene los nombres del dataframe.  
- **body**: la parte del cuerpo contiene datos del dataframe.
- **footer**: la parte del pie de tabla no está implementada de forma predeterminada, pero puede contener notas al pie o cualquier contenido.

![](images/05/flextable-partes.PNG){fig-align="center" width="300"}

Vamos a retomar, con mayor profundidad, estos paquetes cuando trabajemos con archivos **Quarto** donde integremos productos elaborados mediante código (resultados, tablas y gráficos) con elementos de documentación (textos y otros cosas de markdown).




